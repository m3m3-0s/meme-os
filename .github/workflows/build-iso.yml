name: Build ISO

on:
  schedule:
    - cron: "0 0 * * *" # trigger the workflow to run daily at UTC time
  workflow_dispatch:
    branches:
      - main
    paths:
      - '.github/workflows/build_iso.yml'

env:
  IMAGE_REGISTRY: ghcr.io/m3m3-0s

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true # Ensures that only one job from the same group is run at a time

jobs:
  build-iso:
    runs-on: ubuntu-latest
    permissions:
      contents: write 
      packages: write 
      id-token: write 
    strategy:
      fail-fast: false
      matrix:
        image_name: [meme-os] 
        major_version: [40] 
        image_tag: [latest] 

    steps:
      # Step 1: Fetch current date and set it as an environment variable
      - name: Fetch current date
        shell: bash
        run: |
          TIMESTAMP="$(date +%d-%m-%Y)"
          echo "TIMESTAMP=${TIMESTAMP}" >> $GITHUB_ENV

      # Step 2: Checkout the repository
      - name: Checkout Repo
        uses: actions/checkout@v4

      # Step 3: Build the ISO using a custom GitHub Action
      - name: Build ISO
        uses: jasonn3/build-container-installer@main
        id: build
        with:
          arch: x86_64
          version: 40
          image_repo: ghcr.io/m3m3-0s
          image_name: meme-os
          image_tag: latest
          variant: Kinoite
          iso_name: meme-os-40-${{ env.TIMESTAMP }}.iso

      # Step 4: Move the ISO and checksum files to the upload directory
      - name: Move ISO to Upload Directory
        id: upload-directory
        shell: bash
        run: |
          ISO_UPLOAD_DIR=${{ github.workspace }}/upload
          mkdir -p ${ISO_UPLOAD_DIR}
          mv ${{ steps.build.outputs.iso_path }}/${{ steps.build.outputs.iso_name }} ${ISO_UPLOAD_DIR}
          mv ${{ steps.build.outputs.iso_path }}/${{ steps.build.outputs.iso_name }}-CHECKSUM ${ISO_UPLOAD_DIR}
          echo "iso-upload-dir=${ISO_UPLOAD_DIR}" >> $GITHUB_OUTPUT     

      # Step 5: Upload ISO as an artifact
      - name: Upload ISO as artifact
        uses: actions/upload-artifact@v4
        with:
          name: meme-os-40-${{ env.TIMESTAMP }}.iso
          path: ${{ steps.upload-directory.outputs.iso-upload-dir }}
          if-no-files-found: error
          retention-days: 30 # Retain artifacts for 30 days
          compression-level: 0

      # Step 6: Create a GitHub Release
      - name: Create Release
        id: create_release
        uses: actions/github-script@v7
        with:
          script: |
            const release = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `v${{ matrix.major_version }}-${{ env.TIMESTAMP }}`,
              name: `Release v${{ matrix.major_version }}-${{ env.TIMESTAMP }}`,
              draft: false,
              prerelease: false,
            });
            core.setOutput("upload_url", release.data.upload_url);

      # Step 7: Upload ISO to the Release
      - name: Upload ISO to Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.upload-directory.outputs.iso-upload-dir }}/meme-os-40-${{ env.TIMESTAMP }}.iso
          asset_name: meme-os-40-${{ env.TIMESTAMP }}.iso
          asset_content_type: application/octet-stream
